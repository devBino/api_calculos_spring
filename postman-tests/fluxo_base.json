{
	"info": {
		"_postman_id": "f98d13f1-0169-4c48-b840-00f39d484bdb",
		"name": "Automated Tests - Calc Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9798213",
		"_collection_link": "https://dark-desert-264124.postman.co/workspace/Team-Workspace~d813b2c8-9a3f-49fc-8c7f-0883411800f1/collection/9798213-f98d13f1-0169-4c48-b840-00f39d484bdb?action=share&source=collection_link&creator=9798213"
	},
	"item": [
		{
			"name": "configs",
			"item": [
				{
					"name": "configs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('PREV','');",
									"pm.collectionVariables.set('NEXT', '');",
									"pm.collectionVariables.set('ACTION_COMPLETED', true);",
									"",
									"pm.collectionVariables.set('MAX_TENTATIVAS_DETALHAR', 20);",
									"",
									"pm.collectionVariables.set('CONTADOR_SQS', 0);",
									"pm.collectionVariables.set('MAX_CALCULOS_SQS_AWS', 50);",
									"pm.collectionVariables.set('DETALHANDO', false);",
									"pm.collectionVariables.set('UUS', []);",
									"",
									"function criarFuncoes(){",
									"",
									"    let utils = {};",
									"",
									"    utils.encerrar = function encerrar(){",
									"        pm.expect().fail();",
									"        pm.execution.setNextRequest('clear');",
									"    }",
									"",
									"    utils.pausarCodigo = function pausarCodigo(segundos=5){",
									"        setTimeout(()=>{}, (segundos * 1000))",
									"    }",
									"",
									"    utils.checarNextRequest = function checarNextRequest(){",
									"        let next = pm.collectionVariables.get('NEXT');",
									"        if( next !== undefined && next !== null && next !== '' ){",
									"            pm.collectionVariables.set('ACTION_COMPLETED', true);",
									"            pm.execution.setNextRequest(next);",
									"        }",
									"    }",
									"",
									"    utils.checarPrevRequest = function checarPrevRequest(){",
									"        let prev = pm.collectionVariables.get('PREV');",
									"        if( prev !== undefined && prev !== null && prev !== '' ){",
									"            pm.collectionVariables.set('ACTION_COMPLETED', true);",
									"            pm.execution.setNextRequest(prev);",
									"        }",
									"    }",
									"",
									"    utils.isTokenExpirado = function isTokenExpirado(){",
									"        let timeAtual = new Date().getTime();",
									"        let timeExpire = pm.environment.get('TIME_EXPIRE_TOKEN');",
									"        return timeAtual >= timeExpire;",
									"    }",
									"",
									"    utils.getUrlValidaToken = function getUrlValidaToken(){",
									"    ",
									"        let url = `${pm.environment.get('HOST')}:${pm.environment.get('PORT')}`;",
									"        url = `${url}/auth/teste-token`",
									"",
									"        return url;",
									"",
									"    }",
									"    ",
									"    utils.getUrlAutenticar = function getUrlAutenticar(){",
									"    ",
									"        let url = `${pm.environment.get('HOST')}:${pm.environment.get('PORT')}`;",
									"        url = `${url}/auth/token`;",
									"        url = `${url}/${pm.environment.get('USER')}`",
									"        url = `${url}/${pm.environment.get('PASSWORD')}`",
									"",
									"        return url;",
									"",
									"    }",
									"",
									"    utils.validarToken = function validarToken(token){",
									"        ",
									"        //só gera novo token se o token atual expirou",
									"        if( !utils.isTokenExpirado() ){",
									"            return;",
									"        }",
									"        ",
									"        let getRequest = {",
									"            url:utils.getUrlValidaToken(),",
									"            method:'GET',",
									"            header:{",
									"                'Authorization':'Bearer ' + token",
									"            }",
									"        }",
									"",
									"        try{",
									"            pm.sendRequest(getRequest, (error, response)=>{",
									"                if(response.code != 200){",
									"                    utils.gerarToken();        ",
									"                }",
									"            });",
									"        }catch(err){",
									"            pm.test('Erro ao Validar Token '+err.message,()=>{",
									"                pm.expect().fail();",
									"            });",
									"        }",
									"        ",
									"    }",
									"    ",
									"    utils.gerarToken = function gerarToken(){",
									"        ",
									"        const getRequest = {",
									"            url:utils.getUrlAutenticar(),",
									"            method:'GET',",
									"            header:{",
									"                'Accept':'application/json',",
									"                'Content-Type':'application/json'",
									"            }",
									"        };",
									"",
									"        try{",
									"            pm.sendRequest(getRequest, (error, response) => {",
									"                ",
									"                if(error){",
									"                    return;",
									"                }",
									"                ",
									"                let token = response.json().token;",
									"                pm.environment.set('TOKEN', token);",
									"",
									"                let timeExpireToken = new Date().getTime() + (3450*1000);",
									"                pm.environment.set('TIME_EXPIRE_TOKEN', timeExpireToken);",
									"",
									"            });",
									"        }catch(err){",
									"            pm.test('Erro ao Gerar Token '+err.message,()=>{",
									"                pm.expect().fail();",
									"            });",
									"        }",
									"",
									"    }",
									"",
									"    utils.validarBadRequest = function validarBadRequest(json, code){",
									"    ",
									"        pm.test('Http Bad Resquest esperado', ()=>{",
									"            pm.expect(code).to.be.eq(400)",
									"        });",
									"",
									"        let erros = json.erros;",
									"",
									"        pm.test('Erros retornados', ()=>{",
									"            pm.expect(erros).to.be.not.undefined;",
									"        });",
									"        ",
									"    }",
									"",
									"    utils.getValorTagXml = function getValorTagXml(xml = '<teste>teste</teste>', tags=['teste'], escapado=false, log=false, valorDesejado=undefined, cont=0){",
									"        ",
									"        let tagAtual = tags.shift();",
									"        ",
									"        if(tagAtual === undefined || tagAtual === null || tagAtual == ''){",
									"            return '';",
									"        }",
									"",
									"        let abreTag = `<${tagAtual}>`;",
									"        let fechaTag = `</${tagAtual}>`;",
									"",
									"        if(escapado){",
									"            abreTag = `&lt;${tagAtual}&gt;`",
									"            fechaTag = `&lt;/${tagAtual}&gt;`",
									"        }",
									"",
									"        if( valorDesejado !== undefined ){",
									"            let tagExata = `${abreTag}${valorDesejado}${fechaTag}`;",
									"            let tagEncontrada = xml.indexOf(tagExata) != -1;",
									"            if(log){console.log(`Tag com conteúdo ${tagExata} encontrada = ${tagEncontrada}`)}",
									"            return tagEncontrada ? valorDesejado : undefined;",
									"        }",
									"",
									"        posIniTag = xml.indexOf(abreTag);",
									"        posFimTag = xml.indexOf(fechaTag);",
									"",
									"        let xmlExtraido = xml.substring(posIniTag, posFimTag);",
									"        ",
									"        let conteudoTag = xmlExtraido.replace(abreTag,'').replace(fechaTag,'');",
									"        let tagCompleta = `${abreTag}${conteudoTag}${fechaTag}`;",
									"",
									"        if( Array.isArray(tags) && tags.length > 0 ){",
									"            if(log){ console.log(`tag completa NÃO encontrada \\n${tagCompleta}`) }",
									"            return getValorTagXml(xmlExtraido, tags, escapado, log, valorDesejado, ++cont);",
									"        }else{",
									"            if(log){ console.log(`tag completa FOI encontrada \\n${tagCompleta}`) }",
									"            return conteudoTag;",
									"        }",
									"",
									"    }",
									"",
									"    return utils;",
									"",
									"}",
									"",
									"let fnUtils = criarFuncoes + '; criarFuncoes();';",
									"",
									"pm.collectionVariables.set('API_UTILS', fnUtils);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let fns = pm.collectionVariables.get('API_UTILS');",
									"",
									"pm.test('Collection Configs Criadas', ()=>{",
									"    pm.expect(fns).to.be.not.null",
									"    pm.expect(fns).to.be.not.undefined",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/api-info/sobre",
							"protocol": "{{HTTP}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"api-info",
								"sobre"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teste Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let code = pm.response.code",
									"",
									"pm.test('Teste Token Valido?!', ()=>{",
									"    pm.expect(code).to.be.eq(204)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/auth/teste/token",
							"protocol": "{{HTTP}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"auth",
								"teste",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "fluxos",
			"item": [
				{
					"name": "principal-json",
					"item": [
						{
							"name": "Criar Calculo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"try{",
											"    validarRetornoPost();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar)",
											"}",
											"",
											"function validarRetornoPost(){",
											"    ",
											"    let json = pm.response.json();",
											"",
											"    let id = json.id;",
											"",
											"    if( id === undefined || id === null ){",
											"        throw Error('Atributo id não retornado')",
											"    }",
											"",
											"    pm.collectionVariables.set('CALCULO_ID', id);",
											"    pm.collectionVariables.set('CONTADOR', 0);",
											"    pm.test('Atributo id retornado')",
											"    ",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"numero1\":10.98,\n    \"numero2\":12.67,\n    \"sinal\":\"*\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/criar",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"criar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detalhar Calculo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"utils.pausarCodigo();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"try{",
											"    validarRetornoDetalhar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar)",
											"}",
											"",
											"function validarRetornoDetalhar(){",
											"",
											"    let prev = pm.collectionVariables.get('PREV');    ",
											"    let contador = pm.collectionVariables.get('CONTADOR');",
											"    let max_contador = pm.collectionVariables.get('MAX_TENTATIVAS_DETALHAR');",
											"",
											"    let json = pm.response.json();",
											"",
											"    if( json.id === null && prev === 'Deletar Calculo' ){",
											"        pm.test('Calculo não retornado como esperado');",
											"        utils.checarNextRequest();",
											"        return;",
											"    }",
											"",
											"    let estado = json.estado;",
											"",
											"    if( estado !== undefined && estado !== null && estado !== 'F' && contador < max_contador ){",
											"        pm.test(`Tentativa ${contador} executada...`)",
											"        pm.collectionVariables.set('CONTADOR', ++contador);",
											"        pm.execution.setNextRequest('Detalhar Calculo');",
											"        return;",
											"    }",
											"",
											"    let keys = ['id','calculoUU','numero1','numero2','sinal','resultado','descricao','estado']",
											"",
											"    keys.forEach((k)=>{",
											"        let valor = json[k];",
											"        let valorRetornado = valor !== undefined && valor !== null && valor !== ''",
											"        pm.test(`Campo ${k} retornado valor ${valor}`, ()=>{",
											"            pm.expect(valorRetornado).to.be.true;",
											"        });",
											"    })",
											"",
											"    pm.test(`Calculo Id ${json.id} processado com sucesso`, ()=>{",
											"        pm.expect(json.estado).to.be.eq('F')",
											"    });",
											"",
											"    utils.checarNextRequest();",
											"    ",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/detalhar/{{CALCULO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"detalhar",
										"{{CALCULO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Calculo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"try{",
											"    validarRetornoPut();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar)",
											"}",
											"",
											"function validarRetornoPut(){",
											"    ",
											"    let json = pm.response.json();",
											"",
											"    let id = json.id;",
											"",
											"    if( id === undefined || id === null ){",
											"        throw Error('Atributo id não retornado');",
											"    }",
											"",
											"    pm.collectionVariables.set('CALCULO_ID', id);",
											"    pm.collectionVariables.set('CONTADOR', 0);",
											"",
											"    pm.test('Atributo id retornado')",
											"",
											"    pm.collectionVariables.set('NEXT', 'Listar Calculos');",
											"    pm.collectionVariables.set('ACTION_COMPLETED', false);",
											"    pm.execution.setNextRequest('Detalhar Calculo');",
											"    ",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": {{CALCULO_ID}},\n    \"numero1\": 100.99,\n    \"numero2\": 103.98,\n    \"sinal\": \"+\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/atualizar",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"atualizar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Calculos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoListar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoListar(){",
											"    ",
											"    let json = pm.response.json();",
											"",
											"    let regs = json.calculos;",
											"",
											"    if( regs === undefined || regs === null  ){",
											"        throw Error('Registros não retornados na listagem');",
											"    }",
											"    ",
											"    let calculoId = regs",
											"        .filter((r)=>{",
											"            return r.id == pm.collectionVariables.get('CALCULO_ID');",
											"        })",
											"        .map((r) => {return r.id})",
											"        .join('');",
											"",
											"    pm.test(`Calculo com ID ${calculoId} encontrado?!`, ()=>{",
											"        pm.expect(calculoId).to.be.length.above(0);",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/listar?page=1&limit=1000",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"listar"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Calculos Historicos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoListar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoListar(){",
											"    ",
											"    let json = pm.response.json();",
											"    let calculoId = pm.collectionVariables.get('CALCULO_ID');",
											"    ",
											"    pm.test(`Históricos encontrados para o Calculo ID ${calculoId}`, ()=>{",
											"        pm.expect(json).to.be.length.above(0);",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculo-historico/{{CALCULO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculo-historico",
										"{{CALCULO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar Calculo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoDeletar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoDeletar(){",
											"    ",
											"    pm.test(`Http Status Code ${pm.response.code} No Content retornado?!`, ()=>{",
											"        pm.expect(pm.response.code).to.be.eq(204);",
											"    });",
											"",
											"    pm.collectionVariables.set('CONTADOR', 0);",
											"    pm.collectionVariables.set('NEXT', 'Criar Anexo');",
											"    pm.collectionVariables.set('PREV', 'Deletar Calculo');",
											"    pm.collectionVariables.set('ACTION_COMPLETED', false);",
											"    pm.execution.setNextRequest('Detalhar Calculo');",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/deletar/{{CALCULO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"deletar",
										"{{CALCULO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Anexo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoPost();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoPost(){",
											"",
											"    let json = pm.response.json();",
											"",
											"    let id = json.id;",
											"",
											"    if( id === undefined || id === null ){",
											"        throw Error('Atributo id não retornado')",
											"    }",
											"",
											"    pm.collectionVariables.set('ANEXO_ID', id);",
											"    pm.collectionVariables.set('CONTADOR', 0);",
											"    pm.test('Atributo id retornado')",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/home/fernando/Documentos/notas/bkps/teste.csv"
										}
									]
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/upload/csv",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"anexos",
										"upload",
										"csv"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detalhar Anexo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"try{",
											"    validarRetornoDetalhar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar)",
											"}",
											"",
											"function validarRetornoDetalhar(){",
											"",
											"    let contador = pm.collectionVariables.get('CONTADOR');",
											"    let max_contador = pm.collectionVariables.get('MAX_TENTATIVAS_DETALHAR');",
											"",
											"    let json = pm.response.json();",
											"",
											"    let status = json.status;",
											"",
											"    if( status !== undefined && status !== null && status !== 'F' && contador < max_contador ){",
											"        pm.test(`Tentativa ${contador} executada...`)",
											"        pm.collectionVariables.set('CONTADOR', ++contador);",
											"        pm.execution.setNextRequest('Detalhar Anexo');",
											"        return;",
											"    }",
											"",
											"    let keys = ['id','name','contentType','data','createdAt','status']",
											"",
											"    keys.forEach((k)=>{",
											"        let valor = json[k];",
											"        let valorRetornado = valor !== undefined && valor !== null && valor !== ''",
											"        pm.test(`Campo ${k} retornado valor ${valor}`, ()=>{",
											"            pm.expect(valorRetornado).to.be.true;",
											"        });",
											"    })",
											"",
											"    pm.test(`Anexo Id ${json.id} processado com sucesso`, ()=>{",
											"        pm.expect(json.status).to.be.eq('F')",
											"    });",
											"    ",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"utils.pausarCodigo();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/{{ANEXO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"anexos",
										"{{ANEXO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Anexos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoListar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoListar(){",
											"    ",
											"    let json = pm.response.json();",
											"",
											"    let regs = json.anexos;",
											"",
											"    if( regs === undefined || regs === null  ){",
											"        throw Error('Registros não retornados na listagem');",
											"    }",
											"",
											"    let anexo = regs",
											"        .filter((r)=>{",
											"            return r.id == pm.collectionVariables.get('ANEXO_ID');",
											"        });",
											"       ",
											"    pm.test(`Anexo com ID ${anexo[0].id} encontrado?!`, ()=>{",
											"        pm.expect(anexo).to.be.length.above(0)",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/listar?page=1&limit=1000",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"anexos",
										"listar"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Anexos Historicos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoListar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoListar(){",
											"    ",
											"    let json = pm.response.json();",
											"    let anexoId = pm.collectionVariables.get('ANEXO_ID');",
											"    ",
											"    pm.test(`Históricos encontrados para o Anexo ID ${anexoId}`, ()=>{",
											"        pm.expect(json).to.be.length.above(0);",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexo-historico/{{ANEXO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"anexo-historico",
										"{{ANEXO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Anexo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoDownload();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoDownload(){",
											"    ",
											"    let contentType = pm.response.headers",
											"        .filter((h)=>{ ",
											"            return h.key == 'Content-Type' ",
											"        })",
											"        .map((h)=>{",
											"            return h.value",
											"        })",
											"        .join('');",
											"",
											"    pm.test('Content-Type text/csv retornado?!', ()=>{",
											"        pm.expect(contentType).to.be.eq('text/csv');",
											"    });",
											"",
											"    let respBody = new String(pm.response.stream)",
											"    ",
											"    let respBodyOk = respBody !== undefined && respBody !== null && respBody != '' && respBody.startsWith('n1;n2')",
											"",
											"    pm.test('Conteúdo arquivo OK?!', ()=>{",
											"        pm.expect(respBodyOk).to.be.true;",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/download/csv/{{ANEXO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"anexos",
										"download",
										"csv",
										"{{ANEXO_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Accept',",
									"    value: 'application/json'",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "principal-xml",
					"item": [
						{
							"name": "Criar Calculo Xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"try{",
											"    validarRetornoPost();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar)",
											"}",
											"",
											"function validarRetornoPost(){",
											"    ",
											"    let xml = new String(pm.response.stream);",
											"",
											"    let id = utils.getValorTagXml(xml, ['Calculo','id']);",
											"",
											"    if( id === undefined || id === null || id === '' ){",
											"        throw Error('Atributo id não retornado')",
											"    }",
											"",
											"    pm.collectionVariables.set('CALCULO_ID', id);",
											"    pm.collectionVariables.set('CONTADOR', 0);",
											"    pm.test('Atributo id retornado')",
											"    ",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"numero1\":10.98,\n    \"numero2\":12.67,\n    \"sinal\":\"*\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/criar",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"criar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detalhar Calculo Xml",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"utils.pausarCodigo();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"try{",
											"    validarRetornoDetalhar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar)",
											"}",
											"",
											"function validarRetornoDetalhar(){",
											"",
											"    let prev = pm.collectionVariables.get('PREV');    ",
											"    let contador = pm.collectionVariables.get('CONTADOR');",
											"    let max_contador = pm.collectionVariables.get('MAX_TENTATIVAS_DETALHAR');",
											"",
											"    let xml = new String(pm.response.stream);",
											"",
											"    let id = utils.getValorTagXml(xml, ['Calculo','id'])",
											"",
											"    if( (id == undefined || id === null || id === '') && prev === 'Deletar Calculo Xml' ){",
											"        pm.test('Calculo não retornado como esperado');",
											"        utils.checarNextRequest();",
											"        return;",
											"    }",
											"",
											"    let estado = utils.getValorTagXml(xml, ['Calculo','estado']);",
											"",
											"    if( estado !== undefined && estado !== null && estado !== 'F' && contador < max_contador ){",
											"        pm.test(`Tentativa ${contador} executada...`)",
											"        pm.collectionVariables.set('CONTADOR', ++contador);",
											"        pm.execution.setNextRequest('Detalhar Calculo Xml');",
											"        return;",
											"    }",
											"",
											"    let keys = ['id','calculoUU','numero1','numero2','sinal','resultado','descricao','estado']",
											"",
											"    keys.forEach((k)=>{",
											"        let valor = utils.getValorTagXml(xml, ['Calculo', k]);",
											"        let valorRetornado = valor !== undefined && valor !== null && valor !== ''",
											"        pm.test(`Campo ${k} retornado valor ${valor}`, ()=>{",
											"            pm.expect(valorRetornado).to.be.true;",
											"        });",
											"    })",
											"",
											"    pm.test(`Calculo Id ${id} processado com sucesso`, ()=>{",
											"        pm.expect(estado).to.be.eq('F')",
											"    });",
											"",
											"    utils.checarNextRequest();",
											"    ",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/detalhar/{{CALCULO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"detalhar",
										"{{CALCULO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Calculo Xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"try{",
											"    validarRetornoPut();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar)",
											"}",
											"",
											"function validarRetornoPut(){",
											"    ",
											"    let xml = new String(pm.response.stream);",
											"",
											"    let id = utils.getValorTagXml(xml, ['Calculo','id']);",
											"",
											"    if( id === undefined || id === null || id === '' ){",
											"        throw Error('Atributo id não retornado');",
											"    }",
											"",
											"    pm.collectionVariables.set('CALCULO_ID', id);",
											"    pm.collectionVariables.set('CONTADOR', 0);",
											"",
											"    pm.test('Atributo id retornado')",
											"",
											"    pm.collectionVariables.set('NEXT', 'Listar Calculos Xml');",
											"    pm.collectionVariables.set('ACTION_COMPLETED', false);",
											"    pm.execution.setNextRequest('Detalhar Calculo Xml');",
											"    ",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": {{CALCULO_ID}},\n    \"numero1\": 100.99,\n    \"numero2\": 103.98,\n    \"sinal\": \"+\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/atualizar",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"atualizar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Calculos Xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoListar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoListar(){",
											"    ",
											"    let xml = new String(pm.response.stream);",
											"",
											"    let calculoId = utils.getValorTagXml(xml, ['id'], false, true, pm.collectionVariables.get('CALCULO_ID'));",
											"    ",
											"    pm.test(`Calculo com ID ${calculoId} encontrado?!`, ()=>{",
											"        pm.expect(calculoId).to.be.not.undefined;",
											"        pm.expect(calculoId).to.be.length.above(0);",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/listar?page=1&limit=1000",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"listar"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Calculos Historicos Xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoListar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoListar(){",
											"    ",
											"    let xml = new String(pm.response.stream);",
											"",
											"    let calculoId = utils.getValorTagXml(xml, ['calculoId'], false, true, pm.collectionVariables.get('CALCULO_ID'));",
											"    ",
											"    pm.test(`Calculo com ID ${calculoId} encontrado nos históricos?!`, ()=>{",
											"        pm.expect(calculoId).to.be.not.undefined;",
											"        pm.expect(calculoId).to.be.length.above(0);",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculo-historico/{{CALCULO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculo-historico",
										"{{CALCULO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar Calculo Xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoDeletar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoDeletar(){",
											"    ",
											"    pm.test(`Http Status Code ${pm.response.code} No Content retornado?!`, ()=>{",
											"        pm.expect(pm.response.code).to.be.eq(204);",
											"    });",
											"",
											"    pm.collectionVariables.set('CONTADOR', 0);",
											"    pm.collectionVariables.set('NEXT', 'Criar Anexo Xml');",
											"    pm.collectionVariables.set('PREV', 'Deletar Calculo Xml');",
											"    pm.collectionVariables.set('ACTION_COMPLETED', false);",
											"    pm.execution.setNextRequest('Detalhar Calculo Xml');",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/deletar/{{CALCULO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"deletar",
										"{{CALCULO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Anexo Xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoPost();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoPost(){",
											"",
											"    let xml = new String(pm.response.stream);",
											"",
											"    let id = utils.getValorTagXml(xml, ['Anexo','id']);",
											"",
											"    if( id === undefined || id === null || id === '' ){",
											"        throw Error('Atributo id não retornado')",
											"    }",
											"",
											"    pm.collectionVariables.set('ANEXO_ID', id);",
											"    pm.collectionVariables.set('CONTADOR', 0);",
											"    pm.test('Atributo id retornado')",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/home/fernando/Documentos/notas/bkps/teste.csv"
										}
									]
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/upload/csv",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"anexos",
										"upload",
										"csv"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detalhar Anexo Xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"try{",
											"    validarRetornoDetalhar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar)",
											"}",
											"",
											"function validarRetornoDetalhar(){",
											"",
											"    let contador = pm.collectionVariables.get('CONTADOR');",
											"    let max_contador = pm.collectionVariables.get('MAX_TENTATIVAS_DETALHAR');",
											"",
											"    let xml = new String(pm.response.stream);",
											"",
											"    let id = utils.getValorTagXml(xml, ['Anexo','id']);",
											"",
											"    let status = utils.getValorTagXml(xml, ['Anexo','status']);",
											"",
											"    if( status !== undefined && status !== null && status !== 'F' && contador < max_contador ){",
											"        pm.test(`Tentativa ${contador} executada...`)",
											"        pm.collectionVariables.set('CONTADOR', ++contador);",
											"        pm.execution.setNextRequest('Detalhar Anexo Xml');",
											"        return;",
											"    }",
											"",
											"    let keys = ['id','name','contentType','data','createdAt','status']",
											"",
											"    keys.forEach((k)=>{",
											"        let valor = utils.getValorTagXml(xml, ['Anexo', k]);",
											"        let valorRetornado = valor !== undefined && valor !== null && valor !== ''",
											"        pm.test(`Campo ${k} retornado valor ${valor}`, ()=>{",
											"            pm.expect(valorRetornado).to.be.true;",
											"        });",
											"    });",
											"",
											"    pm.test(`Anexo Id ${id} processado com sucesso`, ()=>{",
											"        pm.expect(status).to.be.eq('F')",
											"    });",
											"    ",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"utils.pausarCodigo();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/{{ANEXO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"anexos",
										"{{ANEXO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Anexos Xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoListar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoListar(){",
											"    ",
											"    let xml = new String(pm.response.stream);",
											"",
											"    let anexoId = utils.getValorTagXml(xml, ['id'], false, true, pm.collectionVariables.get('ANEXO_ID'));",
											"",
											"    pm.test(`Anexo com ID ${anexoId} encontrado?!`, ()=>{",
											"        pm.expect(anexoId).to.be.not.undefined;",
											"        pm.expect(anexoId).to.be.length.above(0);",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/listar?page=1&limit=1000",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"anexos",
										"listar"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Anexos Historicos Xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoListar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoListar(){",
											"    ",
											"    let xml = new String(pm.response.stream);",
											"",
											"    let anexoId = utils.getValorTagXml(xml, ['anexoId'], false, true, pm.collectionVariables.get('ANEXO_ID'));",
											"    ",
											"    pm.test(`Anexo com ID ${anexoId} encontrado nos históricos?!`, ()=>{",
											"        pm.expect(anexoId).to.be.not.undefined;",
											"        pm.expect(anexoId).to.be.length.above(0);",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexo-historico/{{ANEXO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"anexo-historico",
										"{{ANEXO_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Anexo Xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') );",
											"",
											"try{",
											"    validarRetornoDownload();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar);",
											"}",
											"",
											"function validarRetornoDownload(){",
											"    ",
											"    let contentType = pm.response.headers",
											"        .filter((h)=>{ ",
											"            return h.key == 'Content-Type' ",
											"        })",
											"        .map((h)=>{",
											"            return h.value",
											"        })",
											"        .join('');",
											"",
											"    pm.test('Content-Type text/csv retornado?!', ()=>{",
											"        pm.expect(contentType).to.be.eq('text/csv');",
											"    });",
											"",
											"    let respBody = new String(pm.response.stream)",
											"    ",
											"    let respBodyOk = respBody !== undefined && respBody !== null && respBody != '' && respBody.startsWith('n1;n2')",
											"",
											"    pm.test('Conteúdo arquivo OK?!', ()=>{",
											"        pm.expect(respBodyOk).to.be.true;",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/download/csv/{{ANEXO_ID}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"anexos",
										"download",
										"csv",
										"{{ANEXO_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Accept',",
									"    value: 'application/xml'",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "fluxo-sqs-aws",
					"item": [
						{
							"name": "Criar Calculo AWS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"try{",
											"    validarRetornoPost();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar)",
											"}",
											"",
											"function validarRetornoPost(){",
											"    ",
											"    let json = pm.response.json();",
											"",
											"    let calculoUU = json.calculoUU;",
											"",
											"    if( calculoUU === undefined || calculoUU === null ){",
											"        throw Error('Atributo calculoUU não retornado')",
											"    }",
											"",
											"    pm.collectionVariables.set('CALCULO_UU', calculoUU);",
											"    pm.collectionVariables.set('CONTADOR', 0);",
											"    pm.test('Atributo calculoUU retornado')",
											"",
											"    let contadorSqs = pm.collectionVariables.get('CONTADOR_SQS');",
											"    let limiteCalculosSqs = pm.collectionVariables.get('MAX_CALCULOS_SQS_AWS');",
											"",
											"    let arrUUs = pm.collectionVariables.get('UUS');",
											"    arrUUs.push(calculoUU);",
											"    pm.collectionVariables.set('UUS', arrUUs);",
											"",
											"    if( contadorSqs < limiteCalculosSqs ){",
											"        pm.collectionVariables.set('CONTADOR_SQS', ++contadorSqs);",
											"        pm.execution.setNextRequest('Criar Calculo AWS');",
											"    }else{",
											"        pm.collectionVariables.set('CONTADOR_SQS', 0);",
											"    }",
											"    ",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('numero1', (Math.random() * 10).toFixed(2));",
											"pm.collectionVariables.set('numero2', (Math.random() * 10).toFixed(2));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"numero1\":{{numero1}},\n    \"numero2\":{{numero2}},\n    \"sinal\":\"+\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/criar-aws",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"criar-aws"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detalhar Calculos Fila AWS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"if( pm.collectionVariables.get('DETALHANDO') === false ){",
											"    let uus = pm.collectionVariables.get('UUS');",
											"    let calculoUU = uus.shift()",
											"    pm.collectionVariables.set('UUS', uus);",
											"    pm.collectionVariables.set('CALCULO_UU', calculoUU);",
											"    pm.collectionVariables.set('DETALHANDO', true);",
											"}",
											"",
											"utils.pausarCodigo(1);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
											"",
											"try{",
											"    validarRetornoDetalhar();",
											"}catch(err){",
											"    pm.test(err.message, utils.encerrar)",
											"}",
											"",
											"function validarRetornoDetalhar(){",
											"",
											"    if( pm.collectionVariables.get('CALCULO_UU') === undefined || pm.collectionVariables.get('CALCULO_UU') === null ){",
											"        pm.test('Processamento da Fila Encerrado');",
											"        return;",
											"    }",
											"",
											"    let contador = pm.collectionVariables.get('CONTADOR');",
											"    let max_contador = pm.collectionVariables.get('MAX_TENTATIVAS_DETALHAR');",
											"",
											"    let json = pm.response.json();",
											"",
											"    let estado = json.estado;",
											"",
											"    if( estado !== undefined && estado !== null && estado !== 'F' && contador < max_contador ){",
											"        pm.test(`Tentativa ${contador} executada...`)",
											"        pm.collectionVariables.set('CONTADOR', ++contador);",
											"        pm.execution.setNextRequest('Detalhar Calculos Fila AWS');",
											"        return;",
											"    }",
											"",
											"    let keys = ['id','calculoUU','numero1','numero2','sinal','resultado','descricao','estado']",
											"",
											"    keys.forEach((k)=>{",
											"        let valor = json[k];",
											"        let valorRetornado = valor !== undefined && valor !== null && valor !== ''",
											"        pm.test(`Campo ${k} retornado valor ${valor}`, ()=>{",
											"            pm.expect(valorRetornado).to.be.true;",
											"        });",
											"    })",
											"",
											"    pm.test(`Calculo Id ${json.id} processado com sucesso`, ()=>{",
											"        pm.expect(json.estado).to.be.eq('F')",
											"    });",
											"",
											"    let calculoUU = json.calculoUU;",
											"",
											"    pm.test(`CalculoUU ${pm.collectionVariables.get('CALCULO_UU')} validado Por Igualdade?!`, ()=>{",
											"        pm.expect(calculoUU).to.be.eq(pm.collectionVariables.get('CALCULO_UU'));",
											"    });",
											"",
											"    if(json.id !== undefined && json.id !== null &&",
											"        calculoUU !== undefined && calculoUU != null &&",
											"        json.estado === 'F'){",
											"            pm.collectionVariables.set('DETALHANDO', false);",
											"    }",
											"",
											"    let contadorSqs = pm.collectionVariables.get('CONTADOR_SQS');",
											"    let limiteCalculosSqs = pm.collectionVariables.get('MAX_CALCULOS_SQS_AWS');",
											"",
											"    if( contadorSqs < limiteCalculosSqs ){",
											"        pm.collectionVariables.set('CONTADOR', 0);",
											"        pm.collectionVariables.set('CONTADOR_SQS', ++contadorSqs);",
											"        pm.execution.setNextRequest('Detalhar Calculos Fila AWS');",
											"        return;",
											"    }",
											"",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/detalhar-calculo-aws/{{CALCULO_UU}}",
									"protocol": "{{HTTP}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"calculos",
										"detalhar-calculo-aws",
										"{{CALCULO_UU}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Erros",
					"item": [
						{
							"name": "calculos",
							"item": [
								{
									"name": "Criar Calculo Erro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
													"",
													"try{",
													"    utils.validarBadRequest(pm.response.json(), pm.response.code);",
													"}catch(err){",
													"    pm.test(err.message, utils.encerrar)",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let pm_valores = pm.collectionVariables.get('VALORES_ERROS_CALCULOS');",
													"",
													"let valorAtual = pm_valores.shift();",
													"",
													"pm.collectionVariables.set('VALOR_TESTE', valorAtual);",
													"",
													"pm.collectionVariables.set('VALORES_ERROS_CALCULOS', pm_valores);",
													"",
													"if( valorAtual == 'na' ){",
													"    pm.collectionVariables.set('JSON_ENVIO', JSON.stringify({}))",
													"}else{",
													"    pm.collectionVariables.set('JSON_ENVIO', JSON.stringify({",
													"        \"numero1\" : valorAtual,",
													"        \"numero2\" : valorAtual,",
													"        \"sinal\": valorAtual",
													"    }));",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{JSON_ENVIO}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/criar",
											"protocol": "{{HTTP}}",
											"host": [
												"{{HOST}}"
											],
											"port": "{{PORT}}",
											"path": [
												"calculos",
												"criar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detalhar Calculo Erro",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
													"",
													"try{",
													"    utils.validarBadRequest(pm.response.json(), pm.response.code);",
													"}catch(err){",
													"    pm.test(err.message, utils.encerrar)",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/detalhar/{{VALOR_TESTE}}",
											"protocol": "{{HTTP}}",
											"host": [
												"{{HOST}}"
											],
											"port": "{{PORT}}",
											"path": [
												"calculos",
												"detalhar",
												"{{VALOR_TESTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Atualizar Calculo Erro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
													"",
													"try{",
													"    utils.validarBadRequest(pm.response.json(), pm.response.code);",
													"}catch(err){",
													"    pm.test(err.message, utils.encerrar)",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let valorAtual = pm.collectionVariables.get('VALOR_TESTE');",
													"",
													"if( valorAtual == 'na' ){",
													"    pm.collectionVariables.set('JSON_ENVIO', JSON.stringify({}))",
													"}else{",
													"    pm.collectionVariables.set('JSON_ENVIO', JSON.stringify({",
													"        \"id\": valorAtual,",
													"        \"numero1\": valorAtual,",
													"        \"numero2\": valorAtual,",
													"        \"sinal\": valorAtual",
													"    }));",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{JSON_ENVIO}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/atualizar",
											"protocol": "{{HTTP}}",
											"host": [
												"{{HOST}}"
											],
											"port": "{{PORT}}",
											"path": [
												"calculos",
												"atualizar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listar Calculos Erro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
													"",
													"try{",
													"    utils.validarBadRequest(pm.response.json(), pm.response.code);",
													"}catch(err){",
													"    pm.test(err.message, utils.encerrar)",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculos/listar?page={{VALOR_TESTE}}&limit={{VALOR_TESTE}}",
											"protocol": "{{HTTP}}",
											"host": [
												"{{HOST}}"
											],
											"port": "{{PORT}}",
											"path": [
												"calculos",
												"listar"
											],
											"query": [
												{
													"key": "page",
													"value": "{{VALOR_TESTE}}"
												},
												{
													"key": "limit",
													"value": "{{VALOR_TESTE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Listar Calculos Historicos Erro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
													"",
													"try{",
													"    ",
													"    utils.validarBadRequest(pm.response.json(), pm.response.code);",
													"",
													"    let pm_valores = pm.collectionVariables.get('VALORES_ERROS_CALCULOS');",
													"",
													"    if( Array.isArray(pm_valores) && pm_valores.length > 0 ){",
													"        pm.execution.setNextRequest('Criar Calculo Erro');",
													"    }",
													"",
													"}catch(err){",
													"    pm.test(err.message, utils.encerrar)",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/calculo-historico/{{VALOR_TESTE}}",
											"protocol": "{{HTTP}}",
											"host": [
												"{{HOST}}"
											],
											"port": "{{PORT}}",
											"path": [
												"calculo-historico",
												"{{VALOR_TESTE}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"let valores = ['', 'abc', 'na']",
											"",
											"let pm_valores = pm.collectionVariables.get('VALORES_ERROS_CALCULOS');",
											"",
											"if( pm_valores === undefined ){",
											"    pm.collectionVariables.set('VALORES_ERROS_CALCULOS', valores);",
											"}"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "anexos",
							"item": [
								{
									"name": "Criar Anexo Erro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
													"",
													"try{",
													"    utils.validarBadRequest(pm.response.json(), pm.response.code);",
													"}catch(err){",
													"    pm.test(err.message, utils.encerrar)",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let pm_valores = pm.collectionVariables.get('VALORES_ERROS_ANEXOS');",
													"",
													"let valorAtual = pm_valores.shift();",
													"",
													"pm.collectionVariables.set('VALOR_TESTE', valorAtual);",
													"",
													"pm.collectionVariables.set('VALORES_ERROS_ANEXOS', pm_valores);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/home/fernando/Documentos/notas/bkps/teste.txt"
												}
											]
										},
										"url": {
											"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/upload/csv",
											"protocol": "{{HTTP}}",
											"host": [
												"{{HOST}}"
											],
											"port": "{{PORT}}",
											"path": [
												"anexos",
												"upload",
												"csv"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detalhar Anexo Erro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
													"",
													"try{",
													"    utils.validarBadRequest(pm.response.json(), pm.response.code);",
													"}catch(err){",
													"    pm.test(err.message, utils.encerrar)",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/{{VALOR_TESTE}}",
											"protocol": "{{HTTP}}",
											"host": [
												"{{HOST}}"
											],
											"port": "{{PORT}}",
											"path": [
												"anexos",
												"{{VALOR_TESTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listar Anexos Erro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
													"",
													"try{",
													"    utils.validarBadRequest(pm.response.json(), pm.response.code);",
													"}catch(err){",
													"    pm.test(err.message, utils.encerrar)",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/listar?page={{VALOR_TESTE}}&limit={{VALOR_TESTE}}",
											"protocol": "{{HTTP}}",
											"host": [
												"{{HOST}}"
											],
											"port": "{{PORT}}",
											"path": [
												"anexos",
												"listar"
											],
											"query": [
												{
													"key": "page",
													"value": "{{VALOR_TESTE}}"
												},
												{
													"key": "limit",
													"value": "{{VALOR_TESTE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Listar Anexos Historicos Erro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
													"",
													"try{",
													"    utils.validarBadRequest(pm.response.json(), pm.response.code);",
													"}catch(err){",
													"    pm.test(err.message, utils.encerrar)",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexo-historico/{{VALOR_TESTE}}",
											"protocol": "{{HTTP}}",
											"host": [
												"{{HOST}}"
											],
											"port": "{{PORT}}",
											"path": [
												"anexo-historico",
												"{{VALOR_TESTE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Download Anexo Erro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let utils = eval( pm.collectionVariables.get('API_UTILS') )",
													"",
													"try{",
													"",
													"    utils.validarBadRequest(pm.response.json(), pm.response.code);",
													"",
													"    let pm_valores = pm.collectionVariables.get('VALORES_ERROS_ANEXOS');",
													"",
													"    if( Array.isArray(pm_valores) && pm_valores.length > 0 ){",
													"        pm.execution.setNextRequest('Criar Anexo Erro');",
													"    }",
													"    ",
													"}catch(err){",
													"    pm.test(err.message, utils.encerrar)",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/anexos/download/csv/{{VALOR_TESTE}}",
											"protocol": "{{HTTP}}",
											"host": [
												"{{HOST}}"
											],
											"port": "{{PORT}}",
											"path": [
												"anexos",
												"download",
												"csv",
												"{{VALOR_TESTE}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"let valores = ['', 'abc', 'na']",
											"",
											"let pm_valores = pm.collectionVariables.get('VALORES_ERROS_ANEXOS');",
											"",
											"if( pm_valores === undefined ){",
											"    pm.collectionVariables.set('VALORES_ERROS_ANEXOS', valores);",
											"}"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "finish",
			"item": [
				{
					"name": "clear",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();",
									"",
									"pm.environment.set('TIME_EXPIRE_TOKEN', 0);",
									"pm.environment.set('TOKEN', '');",
									"",
									"pm.test('Clean Repository');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HTTP}}://{{HOST}}:{{PORT}}/api-info/sobre",
							"protocol": "{{HTTP}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"api-info",
								"sobre"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"preRequestRotinasDefault();",
					"",
					"function preRequestRotinasDefault(){",
					"",
					"    //carregamos as funções uteis da collection",
					"    let fns = pm.collectionVariables.get('API_UTILS');",
					"",
					"    if( fns === undefined || fns == null ){",
					"        return;",
					"    }",
					"",
					"    let utils = eval(fns)",
					"    ",
					"    let token = pm.environment.get('TOKEN')",
					"    ",
					"    //validamos o token e o setamos em cada requisição da collection automaticamente",
					"    utils.validarToken(token)",
					"    ",
					"    pm.request.headers.add({",
					"        key:'Authorization',",
					"        value:`Bearer ${pm.environment.get('TOKEN')}`",
					"    })",
					"",
					"    //reiniciamos variáveis utilizadas por todas as requests",
					"    if( pm.collectionVariables.get('ACTION_COMPLETED') === true ){",
					"        pm.collectionVariables.set('PREV','');",
					"        pm.collectionVariables.set('NEXT', '');",
					"    }",
					"    ",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}